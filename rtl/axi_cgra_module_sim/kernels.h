// CGRA configuration kernels for a series of tasks

#include <stdint.h>

#define BYPASS_NPE 16
#define BYPASS_SIZE BYPASS_NPE * 5
#define BYPASS_BYTES BYPASS_SIZE * 4

uint32_t bypass_kernel[BYPASS_SIZE] = {
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05000000, // 0
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05010000, // 1
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05020000, // 2
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05030000, // 3
    
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05050000, // 5
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05060000, // 6
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05070000, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05090000, // 9
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050D0000, // 13
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000, // 14
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

// For testing, not actual valid config
uint32_t bypass_kernel2[BYPASS_SIZE] = {
    0x00000001, 0x00000002, 0x00000003, 0x00000004, 0x00000005, // 0
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05010000, // 1
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05020000, // 2
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05030000, // 3
    
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05050000, // 5
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05060000, // 6
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05070000, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05090000, // 9
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050D0000, // 13
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000, // 14
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define PEAK_PERF_KRNL_NPE 16
#define PEAK_PERF_KRNL_SIZE PEAK_PERF_KRNL_NPE * 5
#define PEAK_PERF_KRNL_BYTES PEAK_PERF_KRNL_SIZE * 4

uint32_t peak_perf_kernel[PEAK_PERF_KRNL_SIZE] = {
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0xCD000000, // 0
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0xF1010064, // 1
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0xF5020000, // 2
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0x21030000, // 3
    
    0xC0000420, 0x00202080, 0x00000000, 0x00000000, 0x0D040000, // 4
    0xC0000421, 0x00202080, 0x00000000, 0x00000000, 0x25050000, // 5
    0x00000007, 0x00000000, 0x00000000, 0x00000000, 0xED060000, // 6
    0xC0800010, 0x00202030, 0x00000000, 0x00000000, 0xE5070064, // 7

    0x18000420, 0x00400080, 0x00000000, 0x00000000, 0xCD080000, // 8
    0xC0400801, 0x00200190, 0x00000000, 0x00000000, 0xED090000, // 9
    0x00000420, 0x00100086, 0x00000000, 0x00000000, 0xCD0A0000, // 10
    0x00000020, 0x00100206, 0x00000000, 0x00000007, 0xC50B0000, // 11

    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x010C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050D0000, // 13
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x010E0000, // 14
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x010F0000  // 15
};

#define MINSEARCH_NPE 16
#define MINSEARCH_SIZE MINSEARCH_NPE * 5
#define MINSEARCH_BYTES MINSEARCH_SIZE * 4

uint32_t minsearch_kernel[MINSEARCH_SIZE] = {
    0xC0000814, 0x00264010, 0x00000000, 0x00000000, 0xCD000000, // 0
    0x18408000, 0x147809D7, 0x00000032, 0x00000000, 0xF1010064, // 1
    0xD8008420, 0x04680980, 0x00000000, 0x00000000, 0xF5020000, // 2
    0x80040000, 0x00000000, 0x00000000, 0x00000000, 0x21030000, // 3

    0x40000084, 0x00000000, 0x00000000, 0x00000000, 0x0D040000, // 4
    0x921C0001, 0x00000000, 0x00000000, 0x00000000, 0x25050000, // 5
    0xDA100810, 0x00664010, 0x00000000, 0x00000000, 0xED060000, // 6
    0x00200010, 0x14380C57, 0x00000032, 0x00000000, 0xE5070064, // 7

    0x08002002, 0x00000000, 0x00000000, 0x00000000, 0x15080000, // 8
    0x1881000A, 0x04480130, 0x00000000, 0x00000000, 0xF5090000, // 9
    0x00400008, 0x142801D1, 0x00000320, 0x00000000, 0xE50A0064, // 10
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x1B000002, 0x18C01040, 0x00000000, 0x00000001, 0xC50C0000, // 12
    0x03400008, 0x14A801D1, 0x00000050, 0x00000000, 0xE50D0064, // 13
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000, // 14
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define FFT_KRNL_NPE 16
#define FFT_KRNL_SIZE FFT_KRNL_NPE * 5
#define FFT_KRNL_BYTES FFT_KRNL_SIZE * 4

uint32_t fft_kernel[FFT_KRNL_SIZE] = {
    0x580000A1, 0x00402200, 0x00000000, 0x00000007, 0xCD000000, // 0
    0xC0800401, 0x002040B0, 0x00000000, 0x00000000, 0xED010000, // 1
    0x00000044, 0x00000002, 0x00000000, 0x00000000, 0x0D020000, // 2
    0x80040014, 0x00102046, 0x00000000, 0x00000007, 0xE5030000, // 3

    0x18800002, 0x00402230, 0x00000000, 0x00000000, 0xE5040000, // 4
    0x10080002, 0x00000000, 0x00000000, 0x00000000, 0x25050000, // 5
    0xC0800400, 0x002000B0, 0x00000000, 0x00000000, 0xE9060000, // 6
    0x00000402, 0x001020C6, 0x00000000, 0x00000007, 0xCD070000, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05090000, // 9
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0xC0000424, 0x00204080, 0x00000000, 0x00000000, 0xCD0C0000, // 12
    0xC0800011, 0x00200030, 0x00000000, 0x00000000, 0xE50D0000, // 13
    0xC0000814, 0x00204010, 0x00000000, 0x00000000, 0xCD0E0000, // 14
    0xC0800011, 0x00200030, 0x00000000, 0x00000000, 0xE50F0000  // 15
};

#define CONV2D_1_KRNL_NPE 8
#define CONV2D_1_KRNL_SIZE CONV2D_1_KRNL_NPE * 5
#define CONV2D_1_KRNL_BYTES CONV2D_1_KRNL_SIZE * 4

uint32_t conv2d_1_kernel[CONV2D_1_KRNL_SIZE] = {
    0xC0000020, 0x00202200, 0x00000000, 0x00000000, 0xC5000000, // 0
    0xC0000020, 0x00202200, 0x00000000, 0xFFFFFFFF, 0xC5010000, // 1
    0xC0000020, 0x00202200, 0x00000000, 0x00000000, 0xC5020000, // 2

    0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0x18800010, 0x00400030, 0x00000000, 0x00000000, 0xE5050000, // 5
    0xC0800010, 0x00200030, 0x00000000, 0x00000000, 0xE5060000, // 6

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000  // 14
};

#define CONV2D_2_KRNL_NPE 10
#define CONV2D_2_KRNL_SIZE CONV2D_2_KRNL_NPE * 5
#define CONV2D_2_KRNL_BYTES CONV2D_2_KRNL_SIZE * 4

uint32_t conv2d_2_kernel[CONV2D_2_KRNL_SIZE] = {
    0xC0000020, 0x00202200, 0x00000000, 0x00000000, 0xC5000000, // 0
    0xC0000020, 0x00202200, 0x00000000, 0xFFFFFFFF, 0xC5010000, // 1
    0xC0000020, 0x00202200, 0x00000000, 0x00000000, 0xC5020000, // 2
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05030000, // 3

    0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0x18800010, 0x00400030, 0x00000000, 0x00000000, 0xE5050000, // 5
    0x18800010, 0x00400030, 0x00000000, 0x00000000, 0xE5060000, // 6
    0xC0800010, 0x00200030, 0x00000000, 0x00000000, 0xE5070000, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define RELU_KRNL_NPE 14
#define RELU_KRNL_SIZE RELU_KRNL_NPE * 5
#define RELU_KRNL_BYTES RELU_KRNL_SIZE * 4

uint32_t relu_kernel[RELU_KRNL_SIZE] = {
    0xC0000021, 0x00260200, 0x00000000, 0x00000000, 0xC5000000, // 0
    0xC0000024, 0x00260200, 0x00000000, 0x00000000, 0xC5010000, // 1
    0xC0810000, 0x00202130, 0x00000000, 0x00000000, 0xF1020000, // 2
    0xC0000024, 0x00260200, 0x00000000, 0x00000000, 0xC5030000, // 3

    0xC0800010, 0x00202030, 0x00000000, 0x00000000, 0xE5040000, // 4
    0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x05050000, // 5
    0x02100002, 0x00000000, 0x00000000, 0x00000000, 0x25060000, // 6
    0xC0000420, 0x00202080, 0x00000000, 0x00000000, 0xCD070000, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000, // 14
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define DITHER_FILTER_KRNL_NPE 14
#define DITHER_FILTER_KRNL_SIZE DITHER_FILTER_KRNL_NPE * 5
#define DITHER_FILTER_KRNL_BYTES DITHER_FILTER_KRNL_SIZE * 4

uint32_t dither_filter_kernel[DITHER_FILTER_KRNL_SIZE] = {
    0xC0000420, 0x00600086, 0x00000000, 0x00000000, 0xCD000000, // 0
    0x80041000, 0x00000004, 0x00000000, 0x00000000, 0x31010000, // 1
    0xC0000420, 0x00600086, 0x00000000, 0x00000000, 0xCD020000, // 2
    0x80041000, 0x00000004, 0x00000000, 0x00000000, 0x31030000, // 3

    0xD8000020, 0x00664200, 0x00000000, 0x0000007F, 0xC5040000, // 4
    0x03210022, 0x14880D00, 0x00000000, 0x00000000, 0xF5050000, // 5
    0xD8000020, 0x00664200, 0x00000000, 0x0000007F, 0xC5060000, // 6
    0x03210022, 0x14880D00, 0x00000000, 0x00000000, 0xF5070000, // 7

    0xC0000020, 0x00202200, 0x00000000, 0x000000FF, 0xC5080000, // 8
    0x03000020, 0x00804200, 0x00000000, 0x000000FF, 0xC5090000, // 9
    0xC0000020, 0x00202200, 0x00000000, 0x000000FF, 0xC50A0000, // A
    0x03000020, 0x00804200, 0x00000000, 0x000000FF, 0xC50B0000, // B

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000  // 14
};

#define MULT_CTE_M_V_NPE 14
#define MULT_CTE_M_V_SIZE MULT_CTE_M_V_NPE * 5
#define MULT_CTE_M_V_BYTES MULT_CTE_M_V_SIZE * 4

uint32_t mult_cte_m_v_kernel[MULT_CTE_M_V_SIZE] = {
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05000000, // 0
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0xC5010000, // 1
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0xC5020000, // 2
    0xC0000020, 0x00202200, 0x00000000, 0x00000007, 0xC5030000, // 3

    0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0xD0880010, 0x00202030, 0x00000000, 0x00000000, 0xE5050000, // 5
    0xD0880010, 0x00202030, 0x00000000, 0x00000000, 0xE5060000, // 6
    0xC0800010, 0x00202030, 0x00000000, 0x00000000, 0xE5070000, // 7

    0x00000020, 0x08201001, 0x00000000, 0x00000000, 0x4509000F, // 9
    0x00000020, 0x08201001, 0x00000000, 0x00000000, 0x450A000F, // 10
    0x00000020, 0x08201001, 0x00000000, 0x00000000, 0x450B000F, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050D0000, // 13
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000, // 14
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define SUM_CTE_V_V_NPE 10
#define SUM_CTE_V_V_SIZE SUM_CTE_V_V_NPE * 5
#define SUM_CTE_V_V_BYTES SUM_CTE_V_V_SIZE * 4

uint32_t sum_cte_v_v_kernel[SUM_CTE_V_V_SIZE] = {
    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD000000, // 0
    0x00000020, 0x00102206, 0x00000000, 0x00000007, 0xC5010000, // 1
    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD020000, // 2
    0x00000020, 0x00102206, 0x00000000, 0x00000007, 0xC5030000, // 3

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05060000, // 6

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000  // 14
};

#define DOT_PRODUCT_NPE 13
#define DOT_PRODUCT_SIZE DOT_PRODUCT_NPE * 5
#define DOT_PRODUCT_BYTES DOT_PRODUCT_SIZE * 4

uint32_t dot_product_kernel[DOT_PRODUCT_SIZE] = {
    0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x05000000, // 0
    0xD0880010, 0x00202030, 0x00000000, 0x00000000, 0xE5010000, // 1
    0xD0880010, 0x00202030, 0x00000000, 0x00000000, 0xE5020000, // 2
    0xC0800010, 0x00202030, 0x00000000, 0x00000000, 0xE5030000, // 3

    0x00000020, 0x08201001, 0x00000000, 0x00000000, 0x4505000F, // 5
    0x00000020, 0x08201001, 0x00000000, 0x00000000, 0x4506000F, // 6
    0x00000020, 0x08201001, 0x00000000, 0x00000000, 0x4507000F, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05090000, // 9
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050D0000, // 13
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000, // 14
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define GEMVER_0_NPE 12
#define GEMVER_0_SIZE GEMVER_0_NPE * 5
#define GEMVER_0_BYTES GEMVER_0_SIZE * 4

uint32_t gemver_0_kernel[GEMVER_0_SIZE] = {
    0x00000012, 0x00102046, 0x00000000, 0x00000007, 0xC5010000, // 1
    0x18000012, 0x00402040, 0x00000000, 0x00000007, 0xC5020000, // 2
    0x18000050, 0x00402042, 0x00000000, 0x00000007, 0xCD050000, // 5
    0x10080010, 0x00102046, 0x00000000, 0x00000007, 0xE5060000, // 6

    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD000000, // 0
    0xC0400020, 0x00200180, 0x00000000, 0x00000000, 0xE5030000, // 3

    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD040000, // 4
    0xC0400020, 0x00200180, 0x00000000, 0x00000000, 0xE5070000, // 7

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050B0000, // 11

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050F0000  // 15
};

#define GEMVER_0_1_NPE 8
#define GEMVER_0_1_SIZE GEMVER_0_1_NPE * 5
#define GEMVER_0_1_BYTES GEMVER_0_1_SIZE * 4

uint32_t gemver_0_1_kernel[GEMVER_0_1_SIZE] = {
    0x00000010, 0x00102046, 0x00000000, 0x00000007, 0xC5010000, // 1
    0x00000010, 0x00102046, 0x00000000, 0x00000007, 0xC5060000, // 6
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05020000, // 2
    0x00000040, 0x00000002, 0x00000000, 0x00000000, 0x09050000, // 5
    
    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD000000, // 0

    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD040000, // 4

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000  // 12
};

#define GEMVER_2_NPE 10
#define GEMVER_2_SIZE GEMVER_2_NPE * 5
#define GEMVER_2_BYTES GEMVER_2_SIZE * 4

uint32_t gemver_2_kernel[GEMVER_2_SIZE] = {
    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD000000, // 0
    0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x05010000, // 1
    0xC0000420, 0x00200080, 0x00000000, 0x00000000, 0xCD020000, // 2
    0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x05030000, // 3

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05040000, // 4
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05060000, // 6

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x05080000, // 8
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050A0000, // 10

    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050C0000, // 12
    0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x050E0000  // 14
};
